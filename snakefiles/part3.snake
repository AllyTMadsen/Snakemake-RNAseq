# Use this file and construct your own snakefile that successfully creates a workflow
# for this week's tasks. We have provided you a visual representation of what it should
# look like in the assigment. 

#use the names variable to store your list of file names
names=["ADrep1", "P4rep1", "ADrep2", "P4rep2", "P0rep1", "P7rep1", "P0rep2", "P7rep2"]
reads=["R1", "R2"]

rule all:
    input: 
        expand('results/VERSE/{name}.exon.txt', name = names),
        'results/VERSE/verse_concat_all.csv',
        'results/VERSE/filtered_concat_all.csv',
        'results/txn_map_all.csv'

rule verse:
    input:
       "results/{name}Aligned.out.bam",
       gtf='results/mouse_ref.gtf',
    params:
        gene_id='gene_id',
        featureType='exon',
        outdir='results/VERSE/'
    output:
        'results/VERSE/{name}.exon.txt'
        
    shell:
        '''
        verse -a {input.gtf} -g {params.gene_id} -t {params.featureType} -o {params.outdir}{wildcards.name} {input}
        '''

rule concat_verse:
    input:
        verse_files=expand('results/VERSE/{name}.exon.txt', name = names)
    output:
        cts_matrix='results/VERSE/verse_concat_all.csv'
    shell:
        '''
        python concat_df.py -i {input.verse_files} -o {output.cts_matrix}       
        '''

rule filter_cts:
    input:
        cts_matrix='results/VERSE/verse_concat_all.csv'
    output:
        filtered_counts='results/VERSE/filtered_concat_all.csv'
    shell:
        '''
        python filter_cts_mat.py -i {input.cts_matrix} -o {output.filtered_counts}
        '''


rule txn_mapping:
    input:
        gtf='results/mouse_ref.gtf'   
    output:
        csv='results/txn_map_all.csv'
    shell:
        '''
        python parse_gtf.py -i {input.gtf} -o {output.csv}
        '''
      